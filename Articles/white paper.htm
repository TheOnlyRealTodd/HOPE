<html>

<head>
<meta http-equiv="Content-Language" content="en-us">
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>HOPE White Paper</title>
</head>

<body>

<p>HOPE White Paper</p>
<p>Abstract</p>
<p>Negative statement:</p>
<p>Software applications are a temporal snapshot of requirements, frequently 
resulting in a monolithic implementations that do not adjust for future changes.&nbsp; 
Users can only interact with the application in ways determined during 
design/implementation -- once coded, the application cannot be changed -- 
computations, visualization, persistence, distribution, security, performance -- 
sufficient change in capabilities usually requires that the software is 
rewritten, again perpetuating the process of the user being constrained by what 
the application developer provides in terms of functionality and interface.</p>
<p>Positive statement:</p>
<p><u>The Higher Order Programming Environment Concept</u></p>
<p>The Higher Order Programming Environment is an architectural template for 
implementing end-user processes as finite automata (FA) in a distributed 
computing space.&nbsp; FA's inter-communicate with semanticized data, enabling 
the end-user to create unique and custom computational stacks out of FA building 
blocks, called &quot;receptors&quot;, which self-wire based on the semantic &quot;interest&quot; of 
each receptor in the semantic information emitted by other receptors (similar to 
a pub-sub architecture.)&nbsp; Applications developed in the HOPE architecture 
are continually emergent in that new semantic types (and therefore concrete 
meaning) can be created from existing data and new computational stacks can be 
constructed from existing and/or new receptors to work with new meaning 
(information.)&nbsp; Unique ways of rendering information can be immediately 
plugged into an existing computation stack, as rending, being just another kind 
of computation, is implemented as a receptor.&nbsp; Text-to-speech, 2D and 3D 
modeling, language translation, charting, these are all ways that a user can 
dynamically create specialized user interfaces for their individual needs.</p>
<p>Example:</p>
<p><u>HOPE Application Development</u></p>
<p>Application development occurs in several tiers.&nbsp; The underlying 
framework is open sourced, whereas receptor development can be either 
contributed to the open source community or the receptor assembly sold 
commercially or held privately by individuals or corporations for their 
proprietary use.&nbsp; The framework and receptors are developed in the 
traditional software development process with programmers.&nbsp; Conversely, 
many HOPE application stacks can be implemented by users with little training, 
although complex stacks often utilize specialized application stack consultants.&nbsp; 
Being an open architecture, the end-user can also contract or hire in-house 
receptor developers, either for commercial purposes or for propriety in-house 
algorithms.&nbsp; Regardless, all communities can draw on the growing number of 
open-source receptors either to use directly or to customize for their own 
purposes.</p>
<p>Example:</p>
<p><u>HOPE Receptors</u></p>
<p>Receptors are semantic finite automata.&nbsp; As in a pub-sub architecture, 
receptors inform a broker of semantic data in which the receptor has interest.&nbsp; 
Semantic information that is published by a receptor is automatically 
distributed to subscribing receptors.&nbsp; However, the receptor can qualify 
acceptance of the information using non-static filters (dynamic filtering allows 
receptors to adjust for overall internal and external system state.)&nbsp; 
Furthermore, the broker can &quot;emit&quot; sub-components of a semantic structure to 
interested subscriber receptors when the sub-component is itself semantic (as 
opposed to a native computer type.)&nbsp; This enables unique computational 
stacks on semantic subsets without having to specifically break apart the 
semantic structure into its components. </p>
<p>Example:</p>
<p><u>Membrane Computing</u></p>
<p>Membrane computing...</p>
<p><u>Developing Application Stacks</u></p>
<p>Application stacks are developed in a highly visual environment in which 
receptor FA's are dropped onto a design surface.</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>OLD:</p>
<p>&nbsp;</p>
<p>Hope is a &quot;surface&quot; enabling end-users to create user-specific applications 
from &quot;receptor&quot; components.<br>
<br>
Typical applications have a limited surface area of functionality / behavior -- 
in other words, applications are frequently very monolithic. The user can only 
&quot;extend&quot; behavior by going outside of the application, either to the cloud or 
another desktop application.<br>
<br>
Conversely, the Higher Order Programming Environment provides a dynamic, 
runtime, adaptive surface. &quot;Receptors&quot; provide specific behaviors with which 
other receptors interact via &quot;carriers&quot; of information. By &quot;dropping&quot; a 
customized configuration of receptors onto the surface, the end-user can create 
a behavior tailored specifically to his/her needs. This behavior can be altered 
on-the-fly by introducing new receptors, removing existing ones, or 
re-organizing interactions within &quot;membranes.&quot;<br>
&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>
