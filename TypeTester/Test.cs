// This code has been generated by the Semantic Type System.
using System;
using System.Collections.Generic;
using Clifton.SemanticTypeSystem.Interfaces;

namespace SemanticTypes
{
	//Implements ISemanticType as the object type and requires Initialize().
	public class Noun : ISemanticType
	{
		//Native types.
		public string Name { get; set; }

		//Constructor.  Typically called by reflection.
		public Noun() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			Name = "Noun";
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Relationship : ISemanticType
	{
		//Native types.
		public string ForwardName { get; set; }
		public string ReverseName { get; set; }

		//Constructor.  Typically called by reflection.
		public Relationship() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Father_SonRelationship : ISemanticType
	{
		//Semantic types.
		public dynamic Relationship { get; set; }

		//Constructor.  Typically called by reflection.
		public Father_SonRelationship() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Relationship = sts.Create("Relationship", this);
			//Additional semantic type initializers.
			Relationship.ForwardName = "Father of";
			Relationship.ReverseName = "Son of";
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Integer : ISemanticType
	{
		//Native types.
		public int Value { get; set; }

		//Constructor.  Typically called by reflection.
		public Integer() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Name : ISemanticType
	{
		//Native types.
		public string Value { get; set; }

		//Constructor.  Typically called by reflection.
		public Name() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Abbreviation : ISemanticType
	{
		//Native types.
		public string Value { get; set; }

		//Constructor.  Typically called by reflection.
		public Abbreviation() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Population : ISemanticType
	{
		//Semantic types.
		public dynamic Integer { get; set; }

		//Constructor.  Typically called by reflection.
		public Population() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Integer = sts.Create("Integer", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class State : ISemanticType
	{
		//Semantic types.
		public dynamic Name { get; set; }
		public dynamic Abbreviation { get; set; }

		//Constructor.  Typically called by reflection.
		public State() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Name = sts.Create("Name", this);
			Abbreviation = sts.Create("Abbreviation", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Year : ISemanticType
	{
		//Semantic types.
		public dynamic Integer { get; set; }

		//Constructor.  Typically called by reflection.
		public Year() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Integer = sts.Create("Integer", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Collection : ISemanticType
	{
		//Native types.
		public List<ISemanticType> Types { get; set; }

		//Constructor.  Typically called by reflection.
		public Collection() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class X : ISemanticType
	{
		//Semantic types.
		public dynamic Integer { get; set; }

		//Constructor.  Typically called by reflection.
		public X() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Integer = sts.Create("Integer", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Y : ISemanticType
	{
		//Semantic types.
		public dynamic Integer { get; set; }

		//Constructor.  Typically called by reflection.
		public Y() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Integer = sts.Create("Integer", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Point : ISemanticType
	{
		//Semantic types.
		public dynamic X { get; set; }
		public dynamic Y { get; set; }

		//Constructor.  Typically called by reflection.
		public Point() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			X = sts.Create("X", this);
			Y = sts.Create("Y", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class PointA : ISemanticType
	{
		//Semantic types.
		public dynamic Point { get; set; }

		//Constructor.  Typically called by reflection.
		public PointA() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Point = sts.Create("Point", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class PointB : ISemanticType
	{
		//Semantic types.
		public dynamic Point { get; set; }

		//Constructor.  Typically called by reflection.
		public PointB() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Point = sts.Create("Point", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Line : ISemanticType
	{
		//Semantic types.
		public dynamic PointA { get; set; }
		public dynamic PointB { get; set; }

		//Constructor.  Typically called by reflection.
		public Line() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			PointA = sts.Create("PointA", this);
			PointB = sts.Create("PointB", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class myShortLine : ISemanticType
	{
		//Semantic types.
		public dynamic Line { get; set; }

		//Constructor.  Typically called by reflection.
		public myShortLine() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			Line = sts.Create("Line", this);
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class Constant : ISemanticType
	{
		//Native types.
		public string Name { get; set; }

		//Constructor.  Typically called by reflection.
		public Constant() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			Name = "Constant";
			//Additional semantic type initializers.
		}
	}

	//Implements ISemanticType as the object type and requires Initialize().
	public class PI : ISemanticType
	{
		//Native types.
		public double Value { get; set; }

		//Constructor.  Typically called by reflection.
		public PI() { }

		//Implements ICreate.
		public void Initialize(ISemanticTypeSystem sts)
		{
			//Native type initializers.
			Value = 3.1415;
			//Additional semantic type initializers.
		}
	}

}
